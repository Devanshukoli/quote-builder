---
import { db, Bangkok, Pattaya } from "astro:db";

// fetching data from the selected table.
const bangkok = await db.select().from(Bangkok);
const pattaya = await db.select().from(Pattaya);

// defining the columns that I want to display.
const tableColumns = [
  { name: "sic", type: "radio" },
  { name: "pvt", type: "radio" },
  { name: "Description", type: "text" },
];
---

<div class="main-content">

  <div class="message-container">
    <p id="message">Welcome to Quote Builder</p>
  </div>

  <!-- User Inputs -->
  <div class="user-inputs">
    <div class="checkin-date" id="checkin-date">
      <span>Check-in Date:</span>
      <input type="date" id="check-in-date" name="check-in-date" />
    </div>

    <div class="num-pax" id="num-pax">
      <span>Number of Adults:</span>
      <input
        type="number"
        id="num-adults"
        name="num-adults"
        min="1"
        placeholder="Number of Adults"
      />
    </div>

    <div class="num-child" id="num-child">
      <span>Number of Children:</span>
      <input
        type="number"
        id="num-children"
        name="num-children"
        min="0"
        placeholder="Number of Children"
      />
    </div>

    <div class="'guest-name" id="guest-name">
      <span>Guest Name:</span>
      <input
        type="text"
        id="guest-name"
        name="guest-name"
        placeholder="Guest Name"
      />
    </div>
  </div>

  <!-- Filter Buttons for destination -->
  <div class="filter-btn all-btn" id="filter-btn">
    <button class="filter-btn-sub" id="filter-btn-sub">Phuket</button>
    <button class="filter-btn-sub" id="filter-btn-sub">Krabi</button>
    <button class="filter-btn-sub" id="filter-btn-sub">Pattaya</button>
    <button class="filter-btn-sub" id="filter-btn-sub">Bangkok</button>
    <button class="filter-btn-sub" id="filter-btn-sub">Koh Samui</button>
    <button class="filter-btn-sub" id="filter-btn-sub">Hotel</button>
    <button class="filter-btn-sub" id="filter-btn-sub">Transfer</button>
  </div>

  <div class="grid grid-cols-2 gap-4 mb-4">
    <div class="box p-4 bg-yellow-800">
      <!-- Now here will come all the relevent info from database. -->

      <table class="table-auto w-full bg-white text-black border border-black">
        <thead>
          <tr>
            <th class="px-4 py-2 border border-black">SIC</th>
            <th class="px-4 py-2 border border-black">PVT</th>
            <th class="px-4 py-2 border border-black">Description</th>
          </tr>
        </thead>

        <tbody class='rounded-md'>
          <!-- Loop through the data and create table rows -->
          {bangkok.map((item) => (
            <tr>
              <td class="px-4 py-2 border border-black text-center">
                <input type="radio" name="sic" class="radio" />
              </td>
              <td class="px-4 py-2 border border-black text-center">
                <input type="radio" name="pvt" class="radio" />
              </td>
              <td class="px-4 py-2 border border-black">{item.name}</td>
            </tr>
          ))}
        </tbody>
      </table>
      <!-- End of the table -->
    </div>

    <!-- Selected info will show here in tabluar format. -->
    <div id="detail-box" class="box p-4 bg-gray-800">
      <!-- how can i able to propogate the selected data from the above table -->
      
    </div>
    <!-- End of the format... -->

    <!-- Reset & Submit Buttons -->
    <div class="flex justify-end">
      <button class="action-button mr-2">Reset</button>
      <button class="action-button">Submit</button>
    </div>
    
  </div>
</div>

<script>
  let selectedType = null;
  let selectedOption = null;
  let selectedDetails = [];
  let bangkokData = [];

  const typeRadios = document.querySelectorAll('input[name="type"]');
  const optionSelection = document.getElementById("option-selection");
  export const detailCheckboxes = document.querySelectorAll(".detail-checkbox");
  const selectedItemsList = document.getElementById("selected-items-list");
  const updateContentButton = document.getElementById("update-content");


  function handleTypeSelect(type) {
    selectedType = type;
    selectedOption = null;
    renderOptions();
  }

  function handleOptionSelect(option) {
    selectedOption = option;
  }

  export function handleDetailSelect(detail) {
    if (!selectedDetails.includes(detail)) {
      selectedDetails.push(detail);
      renderSelectedItems();
    }
  }

  export function handleDetailDeselect(detail) {
    selectedDetails = selectedDetails.filter((item) => item !== detail);
    renderSelectedItems();
  }

  function renderOptions() {
    optionSelection.innerHTML = "";
    if (selectedType) {
      bangkokData.forEach((option) => {
        const label = document.createElement("label");
        const radio = document.createElement("input");
        radio.type = "radio";
        radio.name = "option";
        radio.value = option.name;
        radio.addEventListener("change", () => handleOptionSelect(option.name));
        label.appendChild(radio);
        label.appendChild(document.createTextNode(option.name));
        optionSelection.appendChild(label);
      });
    }
  }

  function renderSelectedItems() {
    selectedItemsList.innerHTML = "";
    selectedDetails.forEach((detail) => {
      const li = document.createElement("li");
      li.textContent = detail;
      const removeButton = document.createElement("button");
      removeButton.textContent = "Remove";
      removeButton.addEventListener("click", () =>
        handleDetailDeselect(detail)
      );
      li.appendChild(removeButton);
      selectedItemsList.appendChild(li);
    });
  }

  typeRadios.forEach((radio) => {
    radio.addEventListener("change", (e) => handleTypeSelect(e.target.value));
  });

  updateContentButton.addEventListener("click", () => {
    const checkInDate = document.getElementById("check-in-date").value;
    const numAdults = document.getElementById("num-adults").value;
    const numChildren = document.getElementById("num-children").value;
    const guestName = document.getElementById("guest-name").value;

    // Here you can add logic to update the content based on these inputs
    console.log("Updating content with:", {
      checkInDate,
      numAdults,
      numChildren,
      guestName,
    });

    // For now, let's just update the message
    document.getElementById("message").textContent =
      `Quote for ${guestName} - Check-in: ${checkInDate}, Adults: ${numAdults}, Children: ${numChildren}`;
  });

  // Filter button working script below...
  const filterButtons = document.querySelectorAll(".filter-btn-sub");
  filterButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      const table = event.target.dataset.table;
      let data;

      // Fetch data from selected table
      if (table === "Bangkok") {
        data = bangkok;
      } else if (table === "Pattaya") {
        data = pattaya;
      } else {
        // other last table
      }

      // Update the table content
      const tableBody = document.querySelector("tbody");
      tableBody.innerHTML = ""; // clear Existing rows

      // Add new rows based on the fetched data
      data.forEach((item) => {
        const row = document.createElement("tr");
        tableColumns.forEach(({ name, type }) => {
          const call = document.createElement("td");
          cell.classList.add(
            "px-4",
            "py-2",
            "border",
            "border-black",
            "text-center"
          );

          if (type === "radio") {
            const radio = document.createElement("input");
            radio.type = "radio";
            radio.name = name;
            radio.classList.add("radio");
            radio.value = item[name];
            cell.appendChild(radio);
          } else if (type === "text") {
            cell.textContent = item[name];
          } 
          row.appendChild(cell);
        });
        tableBody.appendChild(row);
      });
    });
  });
</script>

<style>
  .main-content {
    padding-top: 5rem;
    margin-left: 1px;
    background-color: whitesmoke;
    color: black;
  }

  .message-container {
    margin-bottom: 1rem;
    padding: 0.5rem;
    background-color: grey;
    border-radius: 4px;
  }

  .user-inputs {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
    align-items: center; /* Align items to the same baseline */
  }

  .user-inputs > div {
    /* Target direct children for better control */
    flex: 1; /* Distribute available space equally */
    margin-bottom: 0; /* Remove default margin for better alignment */
  }

  .user-inputs span {
    display: inline-block; /* Allow for width and margin */
    margin-right: 0.5rem;
  }

  .user-inputs input {
    padding: 0.5rem;
    border: 1px solid #ccc; /* Use a lighter border color */
    border-radius: 4px;
    width: 100%; /* Ensure inputs take up full width */
    box-sizing: border-box; /* Include padding and border in element's total width */
  }

  /* Optional: Placeholder styling for a modern feel */
  .user-inputs input::placeholder {
    color: black; /* Light gray placeholder text */
  }

  /* filter button css */
  .all-btn {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    align-items: center;
    align-content: center;
  }

  .filter-btn-sub {
    box-sizing: border-box;
    appearance: none;
    background-color: transparent;
    border: 2px solid #3498db;
    border-radius: 0.6em;
    color: #3498db;
    cursor: pointer;
    display: flex;
    align-self: center;
    font-size: 1rem;
    font-weight: 400;
    line-height: 1;
    margin: 20px;
    padding: 1.2em 2.8em;
    text-decoration: none;
    text-align: center;
    text-transform: uppercase;
    font-family: "Montserrat", sans-serif;
    font-weight: 700;

    &:hover,
    &:focus {
      color: #fff;
      outline: 0;
    }
  }
  .filter-btn-sub {
    transition:
      box-shadow 300ms ease-in-out,
      color 300ms ease-in-out;
    &:hover {
      box-shadow: 0 0 40px 40px $red inset;
    }
  }

  button {
    margin-bottom: 1rem;
    padding: 0.5rem 1rem;
    background-color: #7971e4;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:hover {
    background-color: #4ea7df;
  }

  .options-container {
    display: flex;
    flex-direction: column;
  }

  .type-selection,
  .option-selection,
  .detail-selection {
    margin-bottom: 1rem;
  }

  label {
    display: block;
    margin-bottom: 0.5rem;
  }

  input[type="radio"],
  input[type="checkbox"] {
    margin-right: 0.5rem;
  }

  .selected-items {
    margin-top: 1rem;
  }
</style>
